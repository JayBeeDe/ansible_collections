---
- block:
    # - name: "Configuring system network (1/2)..."
    #   shell: nmcli con delete "net-{{ network_interface }}" || true
    #   changed_when: false

    - name: "Configuring system network (2/2)..."
      nmcli:
        type: ethernet
        conn_name: "net-{{ network_interface }}"
        ifname: "{{ network_interface }}"
        dns4:
          - "{{ network_dns }}"
        autoconnect: yes
        state:
          present
          #####NOTE that library may need to be patched here
          #####/usr/lib/python3/dist-packages/ansible/modules/net_tools/nmcli.py line 567
          ############FROM
          #####try:
          ##### import gi
          ##### gi.require_version('NMClient', '1.0')
          ##### gi.require_version('NetworkManager', '1.0')
          ##### from gi.repository import NetworkManager, NMClient
          ############REPLACE BY
          ##### try:
          ##### import gi
          ##### gi.require_version('NM', '1.0')
          ##### from gi.repository import NM

    - name: "Configuring sshd (1/5)..."
      replace:
        path: /etc/ssh/sshd_config
        regexp: "^#?Port [0-9]+$"
        replace: "Port {{ ssh_port }}"
        backup: no
      notify: Restart sshd

    - name: "Configuring sshd (2/5)..."
      replace:
        path: /etc/ssh/sshd_config
        regexp: "^#?UseDNS .+$"
        replace: "UseDNS no"
        backup: no
      notify: Restart sshd

    - name: "Configuring sshd (3/5)..."
      replace:
        path: /etc/ssh/sshd_config
        regexp: "^#?PermitRootLogin .+$"
        replace: "PermitRootLogin prohibit-password"
        backup: no
      notify: Restart sshd

    - name: "Configuring sshd (4/5)..."
      replace:
        path: /etc/ssh/sshd_config
        regexp: "^#?PermitEmptyPasswords .+$"
        replace: "PermitEmptyPasswords no"
        backup: no
      notify: Restart sshd

    - name: "Configuring sshd (5/5)..."
      lineinfile:
        path: /etc/ssh/sshd_config
        state: present
        regexp: "^AllowUsers {{ user }}@{{ allowed_ip }} root@localhost root@127.0.0.1 {{ user }}@127.0.0.1 {{ user }}@localhost {{ user }}@172.18.* {{ user }}@172.17.*"
        line: "AllowUsers {{ user }}@{{ allowed_ip }} root@localhost root@127.0.0.1 {{ user }}@127.0.0.1 {{ user }}@localhost {{ user }}@172.18.* {{ user }}@172.17.*"
        backup: no
      notify: Restart sshd

    - name: "Configuring firewalld (1/3)..."
      copy:
        src: "{{ role_path }}/files/firewalld.xml"
        dest: /etc/firewalld/zones/public.xml
        mode: "0644"
        owner: "root"
        group: "root"
        force: no
      notify: Restart firewalld

    - name: "Configuring firewalld (2/3)..."
      replace:
        path: /etc/firewalld/zones/public.xml
        regexp: "allowed-ip-ansible-template"
        replace: "{{ allowed_ip }}/32"
        backup: no
      notify: Restart firewalld

    - name: "Configuring firewalld (3/3)..."
      replace:
        path: /etc/firewalld/zones/public.xml
        regexp: "ssh-port-ansible-template"
        replace: "{{ ssh_port | string }}"
        backup: no
      notify: Restart firewalld

    - name: "Disabling ufw..."
      systemd:
        name: "ufw"
        state: stopped
        enabled: no
      notify: Restart firewalld

    - name: "Configuring fs.inotify.max_user_watches for vscode..."
      lineinfile:
        path: /etc/sysctl.conf
        state: present
        regexp: ^fs.inotify.max_user_watches.*$
        line: "fs.inotify.max_user_watches = 524288"
        backup: no
      notify: Kernel attributes update

    - name: "Configuring grub (1/2)..."
      lineinfile:
        path: /etc/default/grub
        state: present
        regexp: "^(GRUB_TIMEOUT=)([0-9]+)?$"
        line: "GRUB_TIMEOUT=0"
        backup: no
      notify: Update grub

    - name: "Configuring grub (2/2)..."
      lineinfile:
        path: /etc/default/grub
        state: present
        regexp: "^(GRUB_RECORDFAIL_TIMEOUT=)([0-9]+)?$"
        line: "GRUB_RECORDFAIL_TIMEOUT=0"
        backup: no
      notify: Update grub

    - name: "Logical evaluation..."
      stat:
        path: "/boot/efi/EFI/refind/refind.conf"
      register: f

    - name: "Logical evaluation..."
      set_fact:
        refindConfPath: "/boot/efi/EFI/BOOT/refind.conf"
      when: not f.stat.exists

    - name: "Logical evaluation..."
      set_fact:
        refindConfPath: "/boot/efi/EFI/refind/refind.conf"
      when: f.stat.exists

    - name: "Configuring Refind..."
      replace:
        path: "{{ refindConfPath }}"
        regexp: "^(timeout )([0-9]+)?$"
        replace: '\g<1>2'
        backup: no
      notify: Update grub

    - name: "Masking ctrl-alt-del.target..."
      systemd:
        name: "ctrl-alt-del.target"
        enabled: no
        masked: yes
        daemon_reload: yes

    - name: "Configuring motd..."
      copy:
        src: "{{ role_path }}/files/motd"
        dest: /etc/motd
        mode: "0755"
        owner: "root"
        group: "root"

    - name: "Preparing SSH for root user..."
      file:
        path: /root/.ssh/
        state: directory
        mode: "0755"
        owner: "root"
        group: "root"

    - name: "Generating SSH key pair for root user..."
      openssh_keypair:
        path: /root/.ssh/id_rsa
        size: 4096
        type: rsa

    # - name: "Set authorized key for user root..."
    #   authorized_key:
    #     user: root
    #     state: present
    #     key: "{{ lookup('file', '/root/.ssh/id_rsa.pub') }}"
    #     ## suspected to be run locally...

    - name: "Checking known_hosts..."
      stat:
        path: "/root/.ssh/known_hosts"
      register: p

    - name: "Set known_hosts for user root..."
      shell: ssh-keyscan -p "{{ ssh_port }}" -H localhost >> "/root/.ssh/known_hosts"
      when: p.stat.exists == False

    - name: "Configuring aliases for root user (1/2)..."
      copy:
        src: "{{ role_path }}/files/bash_aliases"
        dest: /root/.bash_aliases
        mode: "0755"
        owner: "root"
        group: "root"
        force: no

    - name: "Configuring aliases for root user (2/2)..."
      lineinfile:
        path: /root/.bashrc
        state: present
        regexp: ^(\s*)(.|source)( ~/.bash_aliases)(\s*)$
        line: ". ~/.bash_aliases"
        backup: no

    - name: "Overriding env variables to {{ user }} for root user (1/3)..."
      replace:
        path: /root/.bash_aliases
        regexp: '\$VPJP'
        replace: "{{ git_rootrepo }}/"
        backup: no
      changed_when: false

    - name: "Overriding env variables to {{ user }} for root user (2/3)..."
      replace:
        path: /root/.bash_aliases
        regexp: '\$HOME'
        replace: "{{ home }}/"
        backup: no
      changed_when: false

    - name: "Overriding env variables to {{ user }} for root user (3/3)..."
      replace:
        path: /root/.bash_aliases
        regexp: '\$USER'
        replace: "{{ user }}"
        backup: no
      changed_when: false

    - name: "Check if {{ user }} exists"
      getent:
        database: passwd
        # key: "user"
        key: "{{ user }}"
        fail_key: False
      register: userExists

    - name: "Creating {{ user }} user with SSH key..."
      user:
        name: "{{ user }}"
        shell: /bin/bash
        createhome: yes # create_home since Ansible 2.5
        password: "{{ password | password_hash('sha512') }}"
        generate_ssh_key: yes
        ssh_key_file: "{{ home }}/.ssh/id_rsa"
        ssh_key_bits: 4096
        ssh_key_type: rsa
      when: not userExists.ansible_facts.getent_passwd[user]

  environment:
    PWD: ""

- block:

    - name: "Fix owner of the generated pub key"
      file:
        path: "{{ home }}/.ssh/id_rsa.pub"
        owner: "{{ user }}"
        group: "{{ user }}"
        mode: "0777"
      changed_when: false # to be checked

    - name: "Fix owner of the generated priv key"
      file:
        path: "{{ home }}/.ssh/id_rsa"
        owner: "{{ user }}"
        group: "{{ user }}"

    # - name: "Set authorized key for user {{ user }}..."
    #   authorized_key:
    #     user: "{{ user }}"
    #     state: present
    #     key: "{{ lookup('file', '{{ home }}/.ssh/id_rsa.pub') }}"
    #     ## suspected to be run locally...

    - name: "Fix owner of the generated pub key 2"
      file:
        path: "{{ home }}/.ssh/id_rsa.pub"
        owner: "{{ user }}"
        group: "{{ user }}"
        mode: "0644"
      changed_when: false # to be checked

    - name: "Checking known_hosts..."
      stat:
        path: "{{ home }}/.ssh/known_hosts"
      register: p

    - name: "Set known_hosts for user {{ user }}..."
      shell: ssh-keyscan -p "{{ ssh_port }}" -H localhost >> "{{ home }}/.ssh/known_hosts"
      when: p.stat.exists == False

    - name: "Configuring aliases for {{ user }} user (1/2)..."
      copy:
        src: "{{ role_path }}/files/bash_aliases"
        dest: "{{ home }}/.bash_aliases"
        mode: "0755"
        owner: "{{ user }}"
        group: "{{ user }}"
        force: no

    - name: "Configuring aliases for {{ user }} user (2/2)..."
      lineinfile:
        path: "{{ home }}/.bashrc"
        state: present
        regexp: ^(\s*)(.|source)( ~/.bash_aliases)(\s*)$
        line: ". ~/.bash_aliases"
        backup: no

    - name: "Overriding env variables to {{ user }} for {{ user }} user..."
      replace:
        path: "{{ home }}/.bash_aliases"
        regexp: '\$VPJP'
        replace: "{{ git_rootrepo }}/"
        backup: no
      changed_when: false

  become: yes
  become_user: "{{ user }}"
  environment:
    PWD: ""
